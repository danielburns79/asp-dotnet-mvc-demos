@using System.Security.Claims
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    @{ var welcomeMessage = "Welcome"; if(User.Identity.IsAuthenticated) { welcomeMessage += " " + User.Identity.Name; }}
    <h1 class="display-4">@welcomeMessage</h1>
    <!--<p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>-->
</div>

<style>
    .diagram {
        height: 1000px;
        width: 1000px;
        border: 2px solid black;
        background-color: grey;
    }
    .part-button {
        border: 2px solid black;
        background-color: #52A7D3;
        color: #000000;
    }
    .part-button.active {
        border: 3px solid grey;
        background-color: grey;
        color: #FFF;
    }
    .sentence-word {
        /* default */
    }
    .sentence-word.active {
        background-color: grey;
    }
    .diagram-part-line {
        transform-origin: 0 100%;
        height: 3px; /* Line width of 3 */
        width: 3px;
        background: #000; /* Black fill */
        }
    .diagram-word {
        /* default */
    }
    .diagram-word.active {
        background-color: white;
    }
</style>

<div id='diagram-container'>
    <div id='parts'>
    </div>
    <div id='sentence'>
    </div>
    <div id='diagram' class='diagram' tabindex='0'>
    </div>
</div>


@section scripts
{
    <script>
        jQuery.fn.closestToOffset = function(offset) {
            var closestElement = null,
                elementOffset,
                x = offset.left,
                y = offset.top,
                distance,
                distanceX,
                distanceY,
                minDistance;
            console.log("closestToOffset: x=" + x + ", y=" + y);
            this.each(function() {
                var currentElement = $(this);
                elementOffset = currentElement.offset();
                right = elementOffset.left + currentElement.width();
                bottom = elementOffset.top + currentElement.height();
                console.log("closestToOffset: currentElement=" + currentElement.attr('id') + ", l="+elementOffset.left + ", r="+right+", t="+elementOffset.top+", b="+bottom);

                if (x >= elementOffset.left &&
                    x <= right &&
                    y >= elementOffset.top &&
                    y <= bottom
                ) {
                    closestElement = currentElement;
                    console.log("closestToOffset: offset is within element " + currentElement.attr('id'));
                    return false;
                }

                var offsets = [
                    [elementOffset.left, elementOffset.top],
                    [right, elementOffset.top],
                    [elementOffset.left, bottom],
                    [right, bottom],
                ];
                var totalDistance = 0;
                for (var offset in offsets) {
                    distanceX = offsets[offset][0] - x;
                    distanceY = offsets[offset][1] - y;
                    distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);
                    totalDistance += distance;
                }
                if (minDistance === undefined || totalDistance < minDistance) {
                    minDistance = totalDistance;
                    closestElement = currentElement;
                    console.log("closestToOffset: offset is close to element " + currentElement.attr('id'));
                }
            });
            return closestElement;
        };
        function createLine(x1,y1, x2,y2) {
            var length = Math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
            var angle  = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
            var transform = 'rotate('+angle+'deg)';
            var line = $('<div>')
                .addClass('diagram-part-line')
                .css({
                    'position': 'absolute',
                    'transform': transform
                })
                .width(length)
                .offset({left: x1, top: y1});
            return line;
        }
        function createPart(part, pageX, pageY) {
            var container = $('<div />')
                .addClass('diagram-part')
            switch(part)
            {
                case 's':
                    // on hortzontal before vertical bisect
                    createLine(pageX, pageY, pageX + 100, pageY)
                        .attr('id', 'diagram-part-s-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .appendTo(container);
                    break;
                case 'v':
                case 'vp':
                    // on horizontal after vertical bisect
                    createLine(pageX, pageY, pageX + 100, pageY)
                        .attr('id', 'diagram-part-'+part+'-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .appendTo(container);
                    createLine(pageX, pageY - 20, pageX, pageY + 5)
                        .attr('id', 'diagram-part-'+part+'-vertical')
                        .addClass('diagram-part-vertical')
                        .appendTo(container);
                    break;
                case 'do':
                    // on horizontal after vertical stop
                    createLine(pageX, pageY, pageX + 100, pageY)
                        .attr('id', 'diagram-part-do-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .appendTo(container);
                    createLine(pageX, pageY - 20, pageX, pageY)
                        .attr('id', 'diagram-part-do-vertical')
                        .addClass('diagram-part-vertical')
                        .appendTo(container);
                    break;
                case 'io':
                    // on diagonal below word
                    // TODO
                    break;
                case 'pn':
                case 'pa':
                    // on horizontal after slash
                    // TODO
                    break;
                case 'part':
                    // curved word on bent, slanted below word
                    // TODO
                    break;
                case 'adj':
                case 'adv':
                case 'art':
                case 'pos':
                case 'prep':
                    // on diagonal below word
                    createLine(pageX, pageY, pageX + 100, pageY + 100)
                        .attr('id', 'diagram-part-'+part+'-diagonal')
                        .addClass('diagram-part-diagonal')
                        .addClass('diagram-part-target')
                        .appendTo(container);
                    break;
                case 'po':
                    // on horizontal at bottom of preposition diagonal
                    // TODO
                    break;
                case 'conj':
                    // on broken line between words
                    // TODO
                    break;
                case 'app':
                    // in parentheses to the right of word
                    // TODO
                    break;
                case 'ip':
                    // on pedestal beginning with diagonal
                    // TODO
                    break;
                case 'ger':
                    // on pedestal beginning with staircase OR on staircase (object of preposition)
                    // TODO
                    break;
                case 'exp':
                    // on horizontal connected to modified word via broken
                    // TODO
                    break;
                case 'np':
                    // on pedestal with horizontal (recurse) and broken line from explective to verb
                    // TODO
                    break;
            }
            return container;
        }
        function addPart(part, event, target)
        {
            // TODO: draw the parts as one graphic
            var pageX = event.originalEvent.pageX;
            var pageY = event.originalEvent.pageY;
            switch (part)
            {
                case 's':
                    // a subject requires a clause
                    target = $('<div />')
                        .addClass('clause')
                        .attr('id', 'clause')
                        .appendTo(target);
                    console.log("addPart: part=s target=" + target.attr('id'));
                    break;
                case 'v':
                case 'vp':
                case 'do':
                case 'pn':
                case 'pa':
                    // a verb, verb phrase, direct object, predicate nominative, or predicate adjective
                    // applies to an existing clause
                    target = target.closest('.clause') || $('.clause');
                    console.log("addPart: part=" + part + " target=" + target.attr('id'));
                    if (!target.length)
                    {
                        return;
                    }
                    var lastLine = target.children('.diagram-part:last-child').children('.diagram-part-horizontal');
                    console.log("addPart: lastLine=" + lastLine[0].id);
                    pageX = lastLine.offset().left + lastLine.width();
                    pageY = lastLine.offset().top;
                    console.log("addPart: pageX=" + pageX + " pageY=" + pageY);
                    break;
                case 'conj':
                    // a conjunction applies to two or more existing parts
                    // TODO
                    return;
                    break;
                case 'io':
                case 'part':
                case 'adj':
                case 'adv':
                case 'art':
                case 'pos':
                case 'prep':
                case 'po':
                case 'app':
                case 'ip':
                case 'ger':
                case 'exp':
                case 'np':
                default:
                    // an indirect object, participal, adjective, adverb, article, possessive, preposition, propositional object, appositive, infinitive phrase, gerund, explective, or noun phrase
                    // applies to an existing part
                    target = target.closest('.diagram-part');
                    if (!target.length)
                    {
                        return;
                    }
                    console.log("addPart: part=" + part + " target=" + target.attr('id'));
                    switch (part)
                    {
                        case 'io':
                        case 'adj':
                        case 'adv':
                        case 'art':
                        case 'pos':
                        case 'prep':
                            // on diagonal below word
                            var lastLine = target.children('.diagram-part-horizontal');
                            console.log("addPart: lastLine=" + lastLine[0].id);
                            pageX = lastLine.offset().left + (lastLine.width() / 2);
                            pageY = lastLine.offset().top;
                            console.log("addPart: pageX=" + pageX + " pageY=" + pageY);
                            break;
                        case 'part':
                            // participle - curved word on bent, slanted below word
                            // TODO
                            break;
                        case 'po':
                            // prepositional object - on horizontal at bottom of preposition diagonal
                            // TODO
                            break;
                        case 'app':
                            // appositive - in parentheses to the right of word
                            // TODO
                            break;
                        case 'ip':
                            // infinitive phrases - on pedestal beginning with diagonal
                            // TODO
                            break;
                        case 'ger':
                            // gerund - on pedestal beginning with staircase
                            // gerund (object of preposition) - on staircase
                            // TODO
                            break;
                        case 'exp':
                            // expletive - on horizontal connected to modified word via broken
                            // TODO
                            break;
                        case 'np':
                            // noun phrase - on pedestal with horizontal (recurse) and broken line from explective to verb
                            // TODO
                            break;
                    }
                    break;
            }
            return createPart(part, pageX, pageY)  
                .addClass('diagram-element')
                .attr('id', 'diagram-element-' + ++diagramElementCounter)
                .appendTo(target);
        }
        var diagramElementCounter = 0;
        var margin = 10;
        function addWord(word, target)
        {
            var length = word.width();
            var left = margin;
            var top = 0 - word.height();
            $('<div />')
                .addClass('diagram-word')
                .addClass('diagram-element')
                .attr('id', 'diagram-element-' + ++diagramElementCounter)
                .text(word.text())
                .css({
                    'position': 'relative',
                })
                .width(length)
                .offset({left: left, top: top})
                .appendTo(target);
            // TODO: target.width(length + 2 * margin);
            // TODO: recursive resizeChildren(target.parent())
        }
        function getEventTarget(event) {
            event = event || window.event;
            return event.target || event.srcElement;
        }

        $(document).ready(function() {
            var sentence = "This is a test.";
            var words = sentence.split(/[ ,]+/);
            words.forEach(function(word) {
                $('<span />').appendTo('#sentence')
                    .addClass('sentence-word')
                    .attr('id', word)
                    .text(word);
                $('<span />').appendTo('#sentence')
                    .addClass('sentence-space')
                    .text(" ");
            });
            $('#sentence .sentence-word')
            .draggable({
                 cancel: '.no-drag',
                 revert: true,
                 helper: 'clone',
                 opacity: 0.3
            })
            .click(function(event) {
                $('#sentence .sentence-word').removeClass('active');
                $(this).addClass('active');
            });

            var parts = [
                ['subject', 's'],
                ['verb', 'v'],
                ['verb phrase', 'vp'],
                ['direct object', 'do'],
                ['indirect object', 'io'],
                ['predicate nominative', 'pn'],
                ['predicate adjective', 'pa'],
                ['participle', 'part'],
                ['adjective', 'adj'],
                ['adverb', 'adv'],
                ['article', 'art'],
                ['possessive', 'pos'],
                ['preposition', 'prep'],
                ['prepositional-object', 'po'],
                ['conjunction', 'conj'],
                ['appositive', 'app'],
                ['infinitive phrase', 'ip'],
                ['gerund', 'ger'],
                ['expletive', 'exp'],
                ['noun phrase', 'np'] ];
            parts.forEach(function(part) {
                $('<button />').appendTo('#parts')
                    .attr('id', 'part-button-'+part[1])
                    .addClass('part-button')
                    .text(part[1]);
                $('<span />').appendTo('#parts')
                    .text(' ');
            });
            $('#parts button').click(function(event) {
                $('#parts button').removeClass('active');
                $(this).addClass('active');
            })
            .draggable({
                 cancel: '.no-drag',
                 revert: true,
                 helper: 'clone',
                 opacity: 0.3
            });

            $('#diagram').click(function(event) {
                $(this).focus();
                var activeButton = $('#parts .active');
                if (activeButton.length)
                {
                    var target = $('#diagram .diagram-part-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                    if (target)
                    {
                        console.log("#diagram click : " + target.attr('id') + " -> " + activeButton.text());
                        addPart(activeButton.text(), event, target);
                    }
                    else
                    {
                        console.log("#diagram click : " + this.id + " -> " + activeButton.text());
                        addPart(activeButton.text(), event, $(this));
                    }
                    activeButton.removeClass('active');
                    return;
                }
                var activeText = $('#sentence .active');
                if (activeText.length)
                {
                    var target = $('#diagram .diagram-part-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                    if (target)
                    {
                        console.log("#diagram click : " + target.attr('id') + " -> " + activeText.text());
                        addWord(activeText, target);
                        activeText.removeClass('active');
                        return;
                    }
                }
                var targetWord = $("#diagram .diagram-word").closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                if (targetWord)
                {
                    console.log("#diagram click : word=" + targetWord.text());
                    targetWord.addClass('active');
                }
                var targetPart = $("#diagram .diagram-part-target").closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                if (targetPart)
                {
                    console.log("#diagram click : part=" + targetPart.attr('id'));
                }
            })
            .keydown(function(event) {
                event.preventDefault();
                console.log("#diagram keydown : keyCode="+event.keyCode+", which="+event.which+", ctrlKey="+event.ctrlKey);
            })
            .keyup(function(event) {
                event.preventDefault();
                console.log("#diagram keyup : keyCode="+event.keyCode+", which="+event.which+", ctrlKey="+event.ctrlKey);
                switch (event.keyCode)
                {
                    case 46:
                        console.log("#diagram keyup: delete");
                        var selectedWord = $("#diagram .diagram-word.active");
                        if (selectedWord.length)
                        {
                            console.log("#diagram keyup: remove " + selectedWord.text());
                            selectedWord.remove();
                        }
                        break;
                    //case 17:
                    //    console.log("#diagram keyup: ctrl");
                    //    break;
                    case 90:
                        console.log("#diagram keyup: z");
                        if (event.ctrlKey)
                        {
                            console.log("#digram keyup: ctrl-z");
                            lastElement = $('#diagram-element-' + diagramElementCounter);
                            if (lastElement.length)
                            {
                                console.log("#diiagram keyup: remove " + lastElement.attr('id'));
                                lastElement.remove();
                                --diagramElementCounter;
                            }
                        }
                        break;
                }
            })
            .droppable({
                drop: function(event, ui) {
                    $(this).focus();
                    var draggable = $(ui.draggable);
                    if (draggable.hasClass('part-button'))
                    {   
                        var target = $('#diagram .diagram-part-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY}); 
                        if (target)
                        {
                            console.log("#diagram drop : " + target.attr('id') + " -> " + draggable.text());
                            addPart(draggable.text(), event, target);
                        }
                        else
                        {
                            console.log("#diagram drop : " + this.id + " -> " + draggable.text());
                            addPart(draggable.text(), event, $(this));
                        }
                        $(draggable).removeClass('active');
                        return;
                    }
                    if (draggable.hasClass('sentence-word'))
                    {
                        var target = $('#diagram .diagram-part-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                        if (target)
                        {
                            console.log("#diagram drop : " + target.attr('id') + " -> " + draggable.text());
                            addWord($(draggable), target);
                            $(draggable).removeClass('active');
                        }
                        return;
                    }
                }
            });
        });
    </script>
}
