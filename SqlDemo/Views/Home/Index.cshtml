@using System.Security.Claims
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    @{ var welcomeMessage = "Welcome"; if(User.Identity.IsAuthenticated) { welcomeMessage += " " + User.Identity.Name; }}
    <h1 class="display-4">@welcomeMessage</h1>
    <!--<p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>-->
</div>

<style>
    .part-button {
        border: 2px solid black;
        background-color: #52A7D3;
        color: #000000;
    }
    .part-button.active {
        border: 3px solid grey;
        background-color: grey;
        color: #FFF;
    }
    .sentence-word {
        /* default */
    }
    .sentence-word.active {
        background-color: grey;
    }
    .diagram {
        /* div */
        height: 1000px;
        width: 100%;
        border: 2px solid black;
        background-color: grey;
        overflow: hidden;
        position: relative;
    }
    .diagram-clause {
        /* table */
        height: 0;
        position: relative;
    }
    .diagram-part {
        /* td */
        position: relative;
        height: 0;
    }
    .diagram-part-diagonal {
        /*float: bottom;*/
    }
    .diagram-part-line {
        /* div */
        transform-origin: 0 0;
        height: 3px; /* Line width of 3 */
        width: 3px;
        background: #000; /* Black fill */
        position: absolute;
        margin: 0;
        border: 0;
    }
    .diagram-word {
        /* default */
    }
    .diagram-word.active {
        background-color: white;
    }
</style>

<div id='diagram-container'>
    <div id='parts'>
    </div>
    <div id='sentence'>
    </div>
    <div id='diagram' class='diagram' tabindex='0'>
    </div>
</div>


@section scripts
{
    <script>
        function matrixRotate(p, matrix, anchor)
        {
            // [cos(a), sin(a), -sin(a), cos(a), 0, 0]
            var values = matrix.match(/[\-\d\.]+/g);
            var r = {
                x: (values[0] * (p.x - anchor.x)) + (values[2] * (p.y - anchor.y)) + anchor.x,
                y: (values[1] * (p.x - anchor.x)) + (values[3] * (p.y - anchor.y)) + anchor.y
                };
            return r;
        }
        jQuery.fn.closestToOffset = function(offset) {
            var closestElement = null,
                elementOffset,
                x = offset.left,
                y = offset.top,
                p1, p2, p3, p4,
                centerX, centerY,
                distanceX, distanceY,
                distance, minDistance;
            console.log("closestToOffset: x=" + x + ", y=" + y);
            this.each(function() {
                var currentElement = $(this);
                elementOffset = currentElement.offset();
                p1 = { x: elementOffset.left, y: elementOffset.top };
                p2 = { x: elementOffset.left + currentElement.width(), y: p1.y };
                p3 = { x: p1.x, y: elementOffset.top + currentElement.height() };
                p4 = { x: p2.x, y: p3.y };
                var matrix = currentElement.css('transform');
                if (matrix.indexOf('matrix') >= 0)
                {
                    p2 = matrixRotate(p2, matrix, p1);
                    p4 = matrixRotate(p4, matrix, p3);
                }
                else
                {
                    if (x >= p1.x &&
                        x <= p2.x &&
                        y >= p1.y &&
                        y <= p2.y)
                    {
                        closestElement = currentElement;
                        console.log("closestToOffset: offset is within element " + currentElement.attr('id'));
                        return false;
                    }
                }
                console.log("closestToOffset: currentElement="+currentElement.attr('id')+", x1="+p1.x+", y1="+p1.y+", x2="+p2.x+", y2="+p2.y+", x3="+p3.x+", y3="+p3.y+", x4="+p4.x+", y4="+p4.y);
                var centerX = (p1.x + p2.x + p3.x + p4.x) / 4;
                var centerY = (p1.y + p2.y + p3.y + p4.y) / 4;
                var distanceX = centerX - x;
                var distanceY = centerY - y;
                var distance = Math.sqrt((distanceX * distanceX) + (distanceY * distanceY));
                console.log("closestToOffset: centerX="+centerX+", centerY="+centerY+", distance="+distance);
                if (minDistance === undefined || distance < minDistance)
                {
                    minDistance = distance;
                    closestElement = currentElement;
                    console.log("closestToOffset: offset is close to element=" + currentElement.attr('id') + ", distance=" + distance);
                }
            });
            return closestElement;
        };
        function drawPart(part) {
            var container = $('<td />')
                .addClass('diagram-part')
            switch(part)
            {
                case 's':
                    // on hortzontal before vertical bisect
                    container.width(100);
                    $('<div />')
                        .addClass('diagram-part-line')
                        .css({
                            'width': '100%',
                        })
                        .attr('id', 'diagram-part-s-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .appendTo(container);
                    break;
                case 'v':
                case 'vp':
                    // on horizontal after vertical bisect
                    container.width(100);
                    $('<div />')
                        .addClass('diagram-part-line')
                        .css({
                            'width': '100%'
                        })
                        .attr('id', 'diagram-part-'+part+'-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .appendTo(container);
                    $('<div />')
                        .addClass('diagram-part-line')
                        .css({
                            'transform': 'rotate(90deg)',
                            'width': 25 + 3
                        })
                        .offset({left: 0, top: -20})
                        .attr('id', 'diagram-part-'+part+'-vertical')
                        .addClass('diagram-part-vertical')
                        .appendTo(container);
                    break;
                case 'do':
                    // on horizontal after vertical stop
                    container.width(100);
                    $('<div />')
                        .addClass('diagram-part-line')
                        .css({
                            'width': '100%'
                        })
                        .attr('id', 'diagram-part-do-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .appendTo(container);
                    $('<div />')
                        .addClass('diagram-part-line')
                        .css({
                            'transform': 'rotate(90deg)',
                            'width': 20 + 3
                        })
                        .offset({left: 0, top: -20})
                        .attr('id', 'diagram-part-do-vertical')
                        .addClass('diagram-part-vertical')
                        .appendTo(container);
                    break;
                case 'io':
                    // on diagonal below word
                    // TODO
                    break;
                case 'pn':
                case 'pa':
                    // on horizontal after slash
                    // TODO
                    break;
                case 'part':
                    // curved word on bent, slanted below word
                    // TODO
                    break;
                case 'adj':
                case 'adv':
                case 'art':
                case 'pos':
                case 'prep':
                    // on diagonal below word
                    $('<div />')
                        .addClass('diagram-part-line')
                        .css({
                            'transform': 'rotate(60deg)',
                            'width': '100'
                        })
                        .offset({left: 20, top: 0})
                        .attr('id', 'diagram-part-'+part+'-diagonal')
                        .addClass('diagram-part-diagonal')
                        .addClass('diagram-part-target')
                        .appendTo(container);
                    break;
                case 'po':
                    // on horizontal at bottom of preposition diagonal
                    // TODO
                    break;
                case 'conj':
                    // on broken line between words
                    // TODO
                    break;
                case 'app':
                    // in parentheses to the right of word
                    // TODO
                    break;
                case 'ip':
                    // on pedestal beginning with diagonal
                    // TODO
                    break;
                case 'ger':
                    // on pedestal beginning with staircase OR on staircase (object of preposition)
                    // TODO
                    break;
                case 'exp':
                    // on horizontal connected to modified word via broken
                    // TODO
                    break;
                case 'np':
                    // on pedestal with horizontal (recurse) and broken line from explective to verb
                    // TODO
                    break;
            }
            return container;
        }
        function addModifiers(part, container)
        {
            switch (part)
            {
                case 's':
                case 'v':
                case 'vp':
                case 'do':
                case 'pn':
                case 'pa':
                    console.log("addModifiers: part="+part+", container="+container.attr('id'));
                    var clauseBasic = container.closest('.diagram-clause-basic');
                    if (!clauseBasic.length)
                    {
                        alert("something is very wrong... can't find diagram-clause-basic");
                        return container;
                    }
                    var clause = container.closest('.diagram-clause');
                    if (!clause.length)
                    {
                        alert("something is very wrong... can't find diagram-clause");
                        return container;
                    }
                    var clauseBody = clause.children('.diagram-clause-body');
                    if (!clauseBody.length)
                    {
                        alert("something is very wrong... can't find diagram-clause-body");
                        return container;
                    }
                    var clauseModifiers = clauseBody.children('.diagram-clause-modifiers');
                    if (!clauseModifiers.length)
                    {
                        alert("something is very wrong... can't find diagram-clause-modifiers");
                        return container;
                    }
                    var modifiers = $("<td />")
                        .addClass('diagram-part')
                        .addClass('diagram-element')
                        .addClass('diagram-element-'+part+'-modifiers')
                        .attr('id', 'diagram-element-' + diagramElementCounter)
                        .addClass('diagram-element-' + diagramElementCounter)
                        .appendTo(clauseModifiers);
                    console.log("addModifiers: part="+part+", clauseModifiers="+clauseModifiers.attr('id')+", modifiers="+modifiers.attr('id'));
                    break;
                case 'conj':
                case 'io':
                case 'part':
                case 'adj':
                case 'adv':
                case 'art':
                case 'pos':
                case 'prep':
                case 'po':
                case 'app':
                case 'ip':
                case 'ger':
                case 'exp':
                case 'np':
                default:
                    // TODO
                    break;
            }
            return container;
        }
        function addPart(part, event, container)
        {
            switch (part)
            {
                case 's':
                    // a subject requires a new clause
                    container = $('#diagram');
                    container = $('<table />')
                        .addClass('diagram-clause')
                        .attr('id', 'diagram-clause')
                        .offset({
                            left: event.originalEvent.offsetX,
                            top: event.originalEvent.offsetY
                        })
                        .appendTo(container);
                    container = $('<tbody />')
                        .addClass('diagram-clause-body')
                        .appendTo(container);
                    var clause_basic = $('<tr />')
                        .addClass('diagram-clause-basic')
                        .appendTo(container);
                    $('<tr />')
                        .addClass('diagram-clause-modifiers')
                        .appendTo(container);
                    container = clause_basic;
                    console.log("addPart: part=s container=" + container.attr('id'));
                    break;
                case 'v':
                case 'vp':
                case 'do':
                case 'pn':
                case 'pa':
                    // a verb, verb phrase, direct object, predicate nominative, or predicate adjective
                    // applies to an existing clause
                    container = container.closest('.diagram-clause-basic');
                    if (!container.length)
                    {
                        container = $('.diagram-clause');
                    }
                    if (!container.length)
                    {
                        alert("cannot add "+part+", clause required")
                        return;
                    }
                    switch (part)
                    {
                        case 'v':
                        case 'vp':
                            // TODO: conjunctions
                            // there can only be a single verb or verb phrase
                            if (container.children('.diagram-element-v, .diagram-element-vp').length)
                            {
                                alert("cannot add a second "+part+" to the clause");
                                return;
                            }
                            // a verb or verb phrase requires an existing subject
                            if (!container.children('.diagram-element-s').length)
                            {
                                alert("cannot add a "+part+", subject required");
                                return;
                            }
                            break;
                        case 'do':
                        case 'pn':
                        case 'pa':
                            // TODO: conjunctions
                            // there can only be a single direct object, predicate nominative, or predicate adjective
                            if (container.children('.diagram-element-do, .diagram-element-pn, .diagram-element-pa').length)
                            {
                                alert("cannot add a second " + part + " to the clause");
                                return;
                            }
                            // a direct object, predicate nominative, or predicate adjective
                            // requires an existing verb or verb phrase
                            if (!container.children('.diagram-element-v, .diagram-element.vp').length)
                            {
                                alert("cannot add a "+part+", verb/verb-phrase required");
                                return;
                            }
                            break;
                    }
                    console.log("addPart: part=" + part + " container=" + container.attr('id'));
                    break;
                case 'conj':
                    // a conjunction applies to two or more existing parts
                    // TODO
                    alert("cannot add a conjunction, not implemented");
                    return;
                    break;
                case 'io':
                case 'part':
                case 'adj':
                case 'adv':
                case 'art':
                case 'pos':
                case 'prep':
                case 'po':
                case 'app':
                case 'ip':
                case 'ger':
                case 'exp':
                case 'np':
                default:
                    // an indirect object, participal, adjective, adverb, article, possessive, preposition, propositional object, appositive, infinitive phrase, gerund, explective, or noun phrase
                    // requires an existing part
                    container = container.closest('.diagram-part');
                    if (!container.length)
                    {
                        alert("cannot add a "+part+", element required")
                        return;
                    }
                    var diagramElement = container.closest('.diagram-element');
                    if (!diagramElement.length)
                    {
                        alert("something is very wrong... can't find diagram-element");
                        return;
                    }
                    var clauseBasic = container.closest('.diagram-clause-basic');
                    if (!clauseBasic.length)
                    {
                        alert("something is very wrong... can't find diagram-clause-basic");
                        return;
                    }
                    var clauseBody = clauseBasic.closest('.diagram-clause-body');
                    if (!clauseBody.length)
                    {
                        alert("something is very wrong... can't find diagram-clause-body");
                        return;
                    }
                    var clauseModifiers = clauseBody.children('.diagram-clause-modifiers');
                    if (!clauseModifiers.length)
                    {
                        alert("something is very wrong... can't find diagram-clause-modifiers");
                        return;
                    }
                    var diagramModifiers = clauseModifiers.children('#'+diagramElement.attr('id'));
                    if (!diagramModifiers.length)
                    {
                        alert("something is very wrong... can't find modifiers");
                        return;
                    }
                    var modifiersTable = diagramModifiers.children("table");
                    if (!modifiersTable.length)
                    {
                        var modifiersTable = $("<table />")
                            .appendTo(diagramModifiers);
                        var modifiersBody = $('<tbody />')
                            .appendTo(modifiersTable);
                        var modifiersRow = $('<tr />')
                            .appendTo(modifiersBody);
                        container = modifiersRow;
                    }
                    else
                    {
                        var modifiersBody = modifiersTable.children('tbody');
                        if (!modifiersBody.length)
                        {
                            alert("something is very wrong... can't find modifiers body");
                            return;
                        }
                        var modifiersRow = modifiersBody.children('tr');
                        if (!modifiersRow.length)
                        {
                            alert("something is very wrong... can't find modifiers row");
                            return;
                        }
                        container = modifiersRow;
                    }
                    console.log("addPart: part=" + part + " container=" + container.attr('id'));
                    switch (part)
                    {
                        case 'io':
                        case 'adj':
                        case 'adv':
                        case 'art':
                        case 'pos':
                        case 'prep':
                            // on diagonal below word
                            break;
                        case 'part':
                            // participle - curved word on bent, slanted below word
                            // TODO
                            alert("cannot add a participle, not implemented");
                            break;
                        case 'po':
                            // prepositional object - on horizontal at bottom of preposition diagonal
                            // TODO
                            alert("cannot add a prepositional object, not implemented");
                            break;
                        case 'app':
                            // appositive - in parentheses to the right of word
                            // TODO
                            alert("cannot add an appositive, not implemented");
                            break;
                        case 'ip':
                            // infinitive phrases - on pedestal beginning with diagonal
                            // TODO
                            alert("cannot add an inifinitve phrase, not implemented");
                            break;
                        case 'ger':
                            // gerund - on pedestal beginning with staircase
                            // gerund (object of preposition) - on staircase
                            // TODO
                            alert("cannot add a gerund, not implemented");
                            break;
                        case 'exp':
                            // expletive - on horizontal connected to modified word via broken
                            // TODO
                            alert("cannot add an expletive, not implemented");
                            break;
                        case 'np':
                            // noun phrase - on pedestal with horizontal (recurse) and broken line from explective to verb
                            // TODO
                            alert("cannot add a noun phrase, not implemented");
                            break;
                    }
                    break;
            }
            return addModifiers(part, drawPart(part)
                .addClass('diagram-element')
                .addClass('diagram-element-' + part)
                .attr('id', 'diagram-element-' + ++diagramElementCounter)
                .addClass('diagram-element-' + diagramElementCounter)
                .appendTo(container));
        }
        var diagramElementCounter = 0;
        var margin = 20;
        function addWord(word, target)
        {
            var length = word.width();
            var left = margin;
            var top = 0 - word.height();
            $('<div />')
                .addClass('diagram-word')
                .addClass('diagram-element')
                .attr('id', 'diagram-element-' + ++diagramElementCounter)
                .addClass('diagram-element-' + diagramElementCounter)
                .text(word.text())
                .css({
                    'position': 'relative',
                })
                .width(length)
                .offset({left: left, top: top})
                .appendTo(target);
            //target.width(length + 2 * margin);
            // TODO: recursive resizeChildren(target.parent())
            target.parent().width(length + 2 * margin);
        }
        function getEventTarget(event) {
            event = event || window.event;
            return event.target || event.srcElement;
        }

        $(document).ready(function() {
            var sentence = "This is a test.";
            var words = sentence.split(/[ ,]+/);
            words.forEach(function(word) {
                $('<span />').appendTo('#sentence')
                    .addClass('sentence-word')
                    .attr('id', word)
                    .text(word);
                $('<span />').appendTo('#sentence')
                    .addClass('sentence-space')
                    .text(" ");
            });
            $('#sentence .sentence-word')
            .draggable({
                 cancel: '.no-drag',
                 revert: true,
                 helper: 'clone',
                 opacity: 0.3
            })
            .click(function(event) {
                $('#sentence .sentence-word').removeClass('active');
                $(this).addClass('active');
            });

            var parts = [
                ['subject', 's'],
                ['verb', 'v'],
                ['verb phrase', 'vp'],
                ['direct object', 'do'],
                ['indirect object', 'io'],
                ['predicate nominative', 'pn'],
                ['predicate adjective', 'pa'],
                ['participle', 'part'],
                ['adjective', 'adj'],
                ['adverb', 'adv'],
                ['article', 'art'],
                ['possessive', 'pos'],
                ['preposition', 'prep'],
                ['prepositional-object', 'po'],
                ['conjunction', 'conj'],
                ['appositive', 'app'],
                ['infinitive phrase', 'ip'],
                ['gerund', 'ger'],
                ['expletive', 'exp'],
                ['noun phrase', 'np'] ];
            parts.forEach(function(part) {
                $('<button />').appendTo('#parts')
                    .attr('id', 'part-button-'+part[1])
                    .addClass('part-button')
                    .text(part[1]);
                $('<span />').appendTo('#parts')
                    .text(' ');
            });
            $('#parts button').click(function(event) {
                $('#parts button').removeClass('active');
                $(this).addClass('active');
            })
            .draggable({
                 cancel: '.no-drag',
                 revert: true,
                 helper: 'clone',
                 opacity: 0.3
            });

            $('#diagram').click(function(event) {
                $(this).focus();
                var activeButton = $('#parts .active');
                if (activeButton.length)
                {
                    var target = $('#diagram .diagram-part-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                    if (target)
                    {
                        console.log("#diagram click : " + target.attr('id') + " -> " + activeButton.text());
                        addPart(activeButton.text(), event, target);
                    }
                    else
                    {
                        console.log("#diagram click : " + this.id + " -> " + activeButton.text());
                        addPart(activeButton.text(), event, $(this));
                    }
                    activeButton.removeClass('active');
                    return;
                }
                var activeText = $('#sentence .active');
                if (activeText.length)
                {
                    var target = $('#diagram .diagram-part-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                    if (target)
                    {
                        console.log("#diagram click : " + target.attr('id') + " -> " + activeText.text());
                        addWord(activeText, target);
                        activeText.removeClass('active');
                        return;
                    }
                }
                var targetWord = $("#diagram .diagram-word").closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                if (targetWord)
                {
                    console.log("#diagram click : word=" + targetWord.text());
                    targetWord.addClass('active');
                }
                var targetPart = $("#diagram .diagram-part-target").closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                if (targetPart)
                {
                    console.log("#diagram click : part=" + targetPart.attr('id'));
                }
            })
            .droppable({
                drop: function(event, ui) {
                    $(this).focus();
                    var draggable = $(ui.draggable);
                    if (draggable.hasClass('part-button'))
                    {   
                        var target = $('#diagram .diagram-part-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY}); 
                        if (target)
                        {
                            console.log("#diagram drop : " + target.attr('id') + " -> " + draggable.text());
                            addPart(draggable.text(), event, target);
                        }
                        else
                        {
                            console.log("#diagram drop : " + this.id + " -> " + draggable.text());
                            addPart(draggable.text(), event, $(this));
                        }
                        $(draggable).removeClass('active');
                        return;
                    }
                    if (draggable.hasClass('sentence-word'))
                    {
                        var target = $('#diagram .diagram-part-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                        if (target)
                        {
                            console.log("#diagram drop : " + target.attr('id') + " -> " + draggable.text());
                            addWord($(draggable), target);
                            $(draggable).removeClass('active');
                        }
                        return;
                    }
                }
            })
            /*.keydown(function(event) {
                event.preventDefault();
                console.log("#diagram keydown : keyCode="+event.keyCode+", which="+event.which+", ctrlKey="+event.ctrlKey);
            })*/
            .keyup(function(event) {
                event.preventDefault();
                console.log("#diagram keyup : keyCode="+event.keyCode+", which="+event.which+", ctrlKey="+event.ctrlKey);
                switch (event.keyCode)
                {
                    case 46:
                        console.log("#diagram keyup: delete");
                        var selectedWord = $("#diagram .diagram-word.active");
                        if (selectedWord.length)
                        {
                            console.log("#diagram keyup: remove " + selectedWord.text());
                            selectedWord.remove();
                        }
                        break;
                    //case 17:
                    //    console.log("#diagram keyup: ctrl");
                    //    break;
                    case 90:
                        console.log("#diagram keyup: z");
                        if (event.ctrlKey)
                        {
                            console.log("#digram keyup: ctrl-z");
                            lastElement = $('.diagram-element-' + diagramElementCounter);
                            if (lastElement.length)
                            {
                                console.log("#diagram keyup: remove " + lastElement.attr('id'));
                                lastElement.remove();
                                --diagramElementCounter;
                            }
                        }
                        break;
                }
            });
        });
    </script>
}
