@using System.Security.Claims
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    @{ var welcomeMessage = "Welcome"; if(User.Identity.IsAuthenticated) { welcomeMessage += " " + User.Identity.Name; }}
    <h1 class="display-4">@welcomeMessage</h1>
    <!--<p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>-->
</div>

<style>
    .part-button {
        border: 2px solid black;
        background-color: #52A7D3;
        color: #000000;
    }
    .part-button.active {
        border: 3px solid grey;
        background-color: grey;
        color: #FFF;
    }
    .sentence-word {
        /* default */
    }
    .sentence-word.active {
        background-color: grey;
    }
    .diagram {
        /* div */
        height: 1000px;
        width: 100%;
        border: 2px solid black;
        background-color: grey;
        overflow: hidden;
        position: relative;
    }
    /*.diagram-clause-table*/ 
    .diagram-clause {
        /* table */
        height: 0;
        position: relative;
        /*position: absolute;*/
    }
    .diagram-part {
        /* td */
        position: relative;
        /*position: absolute;*/
        height: 0;
    }
    .diagram-part-diagonal {
        /* default */
    }
    .diagram-part-line {
        /* div */
        transform-origin: 0 0;
        height: 3px; /* Line width of 3 */
        width: 3px;
        background: #000; /* Black fill */
        position: absolute;
        margin: 0;
        border: 0;
    }
    .diagram-part-curved {
        position: absolute;
    }
    .diagram-word {
        /* default */
        position: relative;
    }
    .diagram-word.active {
        background-color: white;
    }
</style>

<div id='diagram-container'>
    <div id='parts'>
    </div>
    <div id='sentence'>
    </div>
    <div id='diagram' class='diagram' tabindex='0'>
    </div>
</div>


@section scripts
{
    <script>
        function angleRotate(p, angle, anchor)
        {
            var values = angle.match(/[\d]+/g);
            var _sin = Math.sin(values[0] * Math.PI / 180);
            var _cos = Math.cos(values[0] * Math.PI / 180);
            var r = {
                x: (_cos * (p.x - anchor.x)) + (-_sin * (p.y - anchor.y)) + anchor.x,
                y: (_sin * (p.x - anchor.x)) + (_cos * (p.y - anchor.y)) + anchor.y
            };
            return r;
        }
        function matrixRotate(p, matrix, anchor)
        {
            // [cos(a), sin(a), -sin(a), cos(a), 0, 0]
            var values = matrix.match(/[\-\d\.]+/g);
            var r = {
                x: (values[0] * (p.x - anchor.x)) + (values[2] * (p.y - anchor.y)) + anchor.x,
                y: (values[1] * (p.x - anchor.x)) + (values[3] * (p.y - anchor.y)) + anchor.y
                };
            return r;
        }
        function transformRotate(p, transform, anchor)
        {
            if (transform.search('matrix') >= 0)
            {
                return matrixRotate(p, transform, anchor);
            }
            else if (transform.search('rotate') >= 0)
            {
                return angleRotate(p, transform, anchor);
            }
            else
            {
                alert("not a valid transform rotate " + transform);
            }
        }
        jQuery.fn.updateCounter = function(counter)
        {
            diagramElementCounter = counter;
            return this;
        }
        function distanceToPoint(v, w)
        {
            return Math.sqrt(Math.pow(v.x - w.x, 2) + Math.pow(v.y - w.y, 2));
        }
        function distanceToLineSegment(p, v, w)
        {
            var l2 = distanceToPoint(v, w);
            if (l2 == 0) return distanceToPoint(p, v);
            var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / Math.pow(l2, 2);
            t = Math.max(0, Math.min(1, t));
            return distanceToPoint(p, {x: v.x + t * (w.x - v.x), y: v.y + t * (w.y - v.y)});
        }
        jQuery.fn.closestToOffset = function(offset) {
            var closestElement = null,
                elementOffset,
                x = offset.left,
                y = offset.top,
                p1, p2, p3, p4,
                distance, minDistance;
            console.log("closestToOffset: x=" + x + ", y=" + y);
            this.each(function() {
                var currentElement = $(this);
                elementOffset = currentElement.offset();
                p1 = { x: elementOffset.left, y: elementOffset.top };
                p2 = { x: elementOffset.left + currentElement.width(), y: p1.y };
                p3 = { x: p1.x, y: elementOffset.top + currentElement.height() };
                p4 = { x: p2.x, y: p3.y };
                var transform = currentElement.css('transform');
                if (transform && transform.search('none') < 0)
                {
                    p2 = transformRotate(p2, transform, p1);
                    p4 = transformRotate(p4, transform, p3);
                }
                else
                {
                    if (x >= p1.x &&
                        x <= p2.x &&
                        y >= p1.y &&
                        y <= p2.y)
                    {
                        closestElement = currentElement;
                        console.log("closestToOffset: offset is within element " + currentElement.attr('id'));
                        return false;
                    }
                }
                console.log("closestToOffset: currentElement="+currentElement.attr('id')+", x1="+p1.x+", y1="+p1.y+", x2="+p2.x+", y2="+p2.y+", x3="+p3.x+", y3="+p3.y+", x4="+p4.x+", y4="+p4.y);
                var distance = distanceToLineSegment({x: x, y: y}, p1, p4);
                console.log("closestToOffset: distance="+distance);
                if (minDistance === undefined || distance < minDistance)
                {
                    minDistance = distance;
                    closestElement = currentElement;
                    console.log("closestToOffset: offset is close to element=" + currentElement.attr('id') + ", distance=" + distance);
                }
            });
            return closestElement;
        };
        function maxWidth(elements)
        {
            var max = 0;
            elements.each(function() {
                var width = $(this).getWidth();
                if (width > max)
                {
                    max = width;
                }
            });
            return max;
        }
        function lineWidthWithModifiers(elements, includeAppositives)
        {
            var total = 0;
            elements.each(function() {
                var element = $(this);
                //console.log("lineWidthWithModifiers: this="+element.attr('id')+" "+element.attr('class')+", includeAppositives="+includeAppositives);
                if (!includeAppositives && element.hasClass('diagram-element-app'))
                {
                    return true; // continue elements.each
                }
                var children = element.children();
                if (children.length)
                {
                    total += lineWidthWithModifiers(children, true);
                    //console.log("lineWidthWithModifiers: this="+element.attr('id')+" "+element.attr('class')+"(total += lineWidthWithModifiers(children))="+total);
                }
                if (element.hasClass('diagram-part-line'))
                {
                    total += element.getWidth();
                    //console.log("lineWidthWithModifiers: this="+element.attr('id')+" "+element.attr('class')+"(total += element.getWidth())="+total);
                }
                if (element.hasClass('diagram-part-curved'))
                {
                    var p = transformRotate(
                            {x: Math.max(element.parent().wordWidth(), 50), y: 0},
                            'rotate(45deg)',
                            {x: 0, y: 0}
                        );
                    total += p.x;
                }
                if (element.hasClass('diagram-part-line-width-break'))
                {
                    //console.log("lineWidthWithModifiers: this="+element.attr('id')+" "+element.attr('class')+", break");
                    var appositive = element.next('.diagram-element-app');
                    if (appositive.length)
                    {
                        total += appositive.children('.diagram-part-line').getWidth();
                    }
                    return false; // break elements.each
                }
            });
            //console.log("lineWidthWithModifiers: this="+elements.attr('id')+" "+elements.attr('class')+", width=" + total);
            return total;
        }
        function lineWidthWithAppositives(elements)
        {
            var total = 0;
            elements.each(function() {
                var element = $(this);
                var children = element.children();
                children.each(function() {
                    var child = $(this);
                    if (child.hasClass('diagram-part-line'))
                    {
                        total += child.getWidth();
                    }
                    if (child.hasClass('diagram-part-curved'))
                    {
                        var p = transformRotate(
                                {x: Math.max(child.parent().wordWidth(), 50), y: 0},
                                'rotate(45deg)',
                                {x: 0, y: 0}
                            );
                        total += p.x;
                    }
                    if (child.hasClass('diagram-element-app'))
                    {
                        total += child.children('.diagram-part-line').getWidth();
                    }
                });
            });
            return total;
        }
        jQuery.fn.getWidth = function()
        {
            elementOffset = this.offset();
            p1 = { x: elementOffset.left, y: elementOffset.top };
            p2 = { x: elementOffset.left + this.width(), y: p1.y };
            var transform = this.css('transform');
            if (transform && transform.search('none') < 0)
            {
                p2 = transformRotate(p2, transform, p1);
            }
            //console.log("getWidth: this="+this.attr('id')+" "+this.attr('class')+", width=" + (p2.x - p1.x));
            return p2.x - p1.x;
        }
        jQuery.fn.wordWidth = function()
        {
            var line = this.children('.diagram-part-line, .diagram-part-curved');
            if (line.length)
            {
                var word = line.children('.diagram-word');
                if (word.length)
                {
                    //console.log("wordWidth: this="+this.attr('id')+" "+this.attr('class')+", word="+word.text()+", width="+word.width());
                    return word.childrenWidth('span') + 20 * 2; // word.width();
                }
            }
            //console.log("wordWidth: this="+this.attr('id')+" "+this.attr('class')+", width=50 (default)");
            return 50;
        }
        jQuery.fn.childrenWidth = function(selector)
        {
            var total = 0;
            this.children(selector).each(function() {
                total += $(this).width();
            });
            return total;
        }
        jQuery.fn.setWidth = function()
        {
            if (this.hasClass('diagram-word'))
            {
                this.width(this.childrenWidth('span') + 20 * 2);
            }
            else if (this.hasClass('diagram-element-s') ||
                     this.hasClass('diagram-element-v') ||
                     this.hasClass('diagram-element-do') ||
                     this.hasClass('diagram-element-pn') ||
                     this.hasClass('diagram-element-pa') ||
                     this.hasClass('diagram-element-adj') ||
                     this.hasClass('diagram-element-adv') ||
                     this.hasClass('diagram-element-art') ||
                     this.hasClass('diagram-element-pos') ||
                     this.hasClass('diagram-element-app'))                
            {
                this.width(Math.max(this.wordWidth(), lineWidthWithModifiers(this.children('.diagram-part'), false) + /*space*/ 20));
            }
            else if (this.hasClass('diagram-element-io-o') ||
                     this.hasClass('diagram-element-prep-o'))
            {
                this.width(Math.max(this.wordWidth(), lineWidthWithModifiers(this.children('.diagram-part'), true) + /*space*/ 20));
            }
            else if (this.hasClass('diagram-element-io') ||
                     this.hasClass('diagram-element-prep'))
            {
                this.width(this.wordWidth());
            }
            else if (this.hasClass('diagram-element-part'))
            {
                this.width(this.wordWidth());
            }
            // TODO - conj, ip, ger, exp, np

            console.log("setWidth: this = "+this.attr('id')+" "+this.attr('class')+", width = " + this.width());
            return this;
        }
        jQuery.fn.setOffset = function()
        {
            if (this.hasClass('diagram-word'))
            {
                this.css({'top': 0 - this.height()});
            }
            // TODO - conj-s, conj-v, etc
            else if (this.hasClass('diagram-element-s'))
            {
                // leave offset as 0,0
            }
            else if (this.hasClass('diagram-element-v') ||
                     this.hasClass('diagram-element-do') ||
                     this.hasClass('diagram-element-pn') ||
                     this.hasClass('diagram-element-pa'))
            {
                if (this.parent().hasClass('diagram-element-part'))
                {
                    var p = transformRotate({x: this.parent().wordWidth(), y:0}, 'rotate(45deg)', {x: 0, y: 0});
                    this.css({'left': 0 + p.x, 'top': 0 + p.y - 3});
                }
                else
                {
                    this.css({'left': lineWidthWithAppositives(this.prevAll('.diagram-part'))});
                }
            }
            else if (this.hasClass('diagram-element-adj') ||
                     this.hasClass('diagram-element-adv') ||
                     this.hasClass('diagram-element-art') ||
                     this.hasClass('diagram-element-pos') ||
                     this.hasClass('diagram-element-io') ||
                     this.hasClass('diagram-element-prep'))
            {
                this.css({'left': lineWidthWithModifiers(this.prevAll('.diagram-part'), false) + /*space*/ 20});
            }
            else if (this.hasClass('diagram-element-io-o') ||
                     this.hasClass('diagram-element-prep-o'))
            {
                var diagonal = this.prev('.diagram-part-diagonal');
                var diagonalOffset = diagonal.offset();
                var transform = diagonal.css('transform');
                //console.log("setOffset: io/prep - dx="+diagonalOffset.left+", dy="+diagonalOffset.top+"dw="+diagonal.width());
                var diagonalBottom = transformRotate({x:diagonalOffset.left + diagonal.width(), y:diagonalOffset.top + diagonal.height()}, transform, {x: diagonalOffset.left, y:diagonalOffset.top});
                this.css({'left': diagonalBottom.x - diagonalOffset.left, 'top': diagonalBottom.y - diagonalOffset.top - 3});
            }
            else if (this.hasClass('diagram-element-app'))
            {
                //console.log("setoffset: app - parent.width="+this.parent().width());
                this.css({'left': this.parent().width()});
            }
            else if (this.hasClass('diagram-element-part'))
            {
                this.css({'left': lineWidthWithModifiers(this.prevAll('.diagram-part'), false) + /*space*/ 20});
                var p = transformRotate({x: this.wordWidth(), y:0}, 'rotate(45deg)', {x: 0, y: 0});
                var canvas = this.children('.diagram-part-curved').children('canvas')[0];
                if (canvas.getContext)
                {
                    var context = canvas.getContext('2d');
                    context.clearRect(0, 0, canvas.width, canvas.height);
                    canvas.width = Math.max(Math.ceil(p.x/100)*100, 300);
                    canvas.height = Math.max(Math.ceil(p.x/100)*100, 150);
                    context.beginPath();
                    context.moveTo(0, 0);
                    context.arcTo(0, p.y, p.x, p.y, p.x);
                    context.stroke();
                    //console.log("setOffset: PART - DREW IT! p1x="+0+",p1y="+p.y+",p2x="+p.x+",p2y="+p.y+",r="+p.x)
                    var word = this.children('.diagram-part-curved').children('.diagram-word');
                    if (word.length)
                    {
                        word.css({
                                'top': 0 - canvas.height - word.height(),
                                'transform': 'rotate(45deg) translate('+word.height()/2+'px, 0px)', 
                                'transform-origin': '0 0'
                            });
                    }
                }
                else
                {
                    alert("can draw a participle... your browswer doesn't support canvas");
                    return;
                }
            }
            // TODO - conj, ip, ger, exp, np
            
            console.log("setOffset: this = "+this.attr('id')+" "+this.attr('class')+", left = " + this.offset().left);
            return this;
        }
        jQuery.fn.setWidths = function()
        {
            var children = this.children();
            if (children.length)
            {
                children.each(function() { $(this).setWidths() });
            }
            console.log("setWidths: this = " + this.attr('id') + ", return this.setWidth()");
            return this.setWidth();
        }
        jQuery.fn.setOffsets = function()
        {
            var children = this.children();
            if (children.length)
            {
                children.each(function() { $(this).setOffsets() });
            }
            console.log("setOffsets: this = " + this.attr('id') + ", return this.setWidth()");
            return this.setOffset();
        }
        jQuery.fn.drawClause = function()
        {
            var clause = this.closest('.diagram-clause');
            if (!clause.length)
            {
                alert("something is very wrong... can't find diagram-clause")
                return;
            }
            // all widths must be calculated before any offsets can be calculated
            clause.children().each(function() { $(this).setWidths(); });
            clause.children().each(function() { $(this).setOffsets(); });
            return this;
        }
        jQuery.fn.getPartsText = function()
        {
            return this.text(); // TODO - turn this into 's', 'v', etc, 'conj-s', 'conj-v', etc
        }
        jQuery.fn.addElement = function(part, counter)
        {
            return $('<div />')
                .css({'min-width': 50})
                .drawPart(part, counter)
                .addClass('diagram-part')
                .addClass('diagram-element')
                .addClass('diagram-element-' + part)
                .attr('id', 'diagram-element-' + counter)
                .addClass('diagram-element-' + counter)
                .appendTo(this)
                .updateCounter(counter);
        }
        jQuery.fn.drawPart = function(part, counter)
        {
            switch(part)
            {
                case 's':
                    // on hortzontal before vertical bisect
                    $('<div />')
                        .addClass('diagram-part-line')
                        .width('100%')
                        .attr('id', 'diagram-part-s-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .addClass('diagram-part-word-target')
                        .appendTo(this);
                    break;
                case 'v':
                    // on horizontal after vertical bisect
                    $('<div />')
                        .addClass('diagram-part-line')
                        .width('100%')
                        .attr('id', 'diagram-part-'+part+'-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .addClass('diagram-part-word-target')
                        .appendTo(this);
                    $('<div />')
                        .addClass('diagram-part-line')
                        .css({'transform': 'rotate(90deg)'})
                        .width(25 + 3)
                        .offset({left: 0, top: -20})
                        .attr('id', 'diagram-part-'+part+'-vertical')
                        .addClass('diagram-part-vertical')
                        .appendTo(this);
                    break;
                case 'do':
                    // on horizontal after vertical stop
                    $('<div />')
                        .addClass('diagram-part-line')
                        .width('100%')
                        .attr('id', 'diagram-part-do-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .addClass('diagram-part-word-target')
                        .addClass('diagram-part-line-width-break')
                        .appendTo(this);
                    $('<div />')
                        .addClass('diagram-part-line')
                        .css({'transform': 'rotate(90deg)'})
                        .width(20 + 3)
                        .offset({left: 0, top: -20})
                        .attr('id', 'diagram-part-do-vertical')
                        .addClass('diagram-part-vertical')
                        .appendTo(this);
                    break;
                case 'pn':
                case 'pa':
                    // on horizontal after slash (\)
                    $('<div />')
                        .addClass('diagram-part-line')
                        .width('100%')
                        .attr('id', 'diagram-part-do-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .addClass('diagram-part-word-target')
                        .appendTo(this);
                    $('<div />')
                        .addClass('diagram-part-line')
                        .css({'transform': 'rotate(60deg)'})
                        .width(20 + 3)
                        .offset({left: 0, top: -20})
                        .attr('id', 'diagram-part-do-vertical')
                        .addClass('diagram-part-vertical')
                        .appendTo(this);
                    break;
                case 'part':
                    // curved word on bent, slanted below word
                    var participle = $('<div />')
                        .attr('id', 'diagram-part-part-curved')
                        .addClass('diagram-part-curved')
                        .addClass('diagram-part-target')
                        .addClass('diagram-part-word-target')
                        .appendTo(this);
                    $('<canvas />')
                        .css({'all': 'revert'})
                        .appendTo(participle);
                    // TODO
                    break;
                case 'adj':
                case 'adv':
                case 'art':
                case 'pos':
                    // on diagonal below word
                    $('<div />')
                        .addClass('diagram-part-line')
                        .css({'transform': 'rotate(60deg)'})
                        .width('100%')
                        .attr('id', 'diagram-part-'+part+'-diagonal')
                        .addClass('diagram-part-diagonal')
                        .addClass('diagram-part-word-target')
                        .appendTo(this);
                    break;
                case 'io':
                case 'prep':
                    // indirect object on horizontal at bottom of diagonal below word
                    // preposition on diagonal below word, object on horizontal at bottom of diagonal
                    console.log("drawPart: prep")
                    var diagonal = $('<div />')
                        .addClass('diagram-part-line')
                        .css({'transform': 'rotate(60deg)'})
                        .width('100%')
                        .attr('id', 'diagram-part-'+part+'-diagonal')
                        .addClass('diagram-part-diagonal')
                        .appendTo(this);
                    if (part === 'prep')
                    {
                        diagonal.addClass('diagram-part-word-target');
                    }
                    this.addElement('prep-o', counter);
                    break;
                case 'io-o':
                case 'prep-o':
                    $('<div />')
                        .addClass('diagram-part-line')
                        .width('100%')
                        .attr('id', 'diagram-part-'+part+'-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .addClass('diagram-part-word-target')
                        .addClass('diagram-part-line-width-break')
                        .appendTo(this);
                    break;
                case 'conj':
                    // on broken line between words
                    // TODO
                    //break;
                case 'conj-s':
                case 'conj-v':
                case 'conj-do':
                case 'conj-pn':
                case 'conj-pa':
                    // TODO
                    //break;
                case 'conj-io':
                case 'conj-part':
                case 'conj-adj':
                case 'conj-adv':
                case 'conj-art':
                case 'conj-pos':
                case 'conj-prep':
                    // TODO
                    //break;
                case 'conj-app':
                case 'conj-ip':
                case 'conj-ger':
                case 'conj-exp':
                case 'conj-np':
                    // TODO
                    //break;
                case 'app':
                    // in parentheses to the right of word
                    var horizontal = $('<div />')
                        .addClass('diagram-part-line')
                        .width('100%')
                        .attr('id', 'diagram-part-s-horizontal')
                        .addClass('diagram-part-horizontal')
                        .addClass('diagram-part-target')
                        .addClass('diagram-part-word-target')
                        .appendTo(this);
                    horizontal.addWord($('<span>(</span><span>)</span>'), counter);
                    break;
                case 'ip':
                    // on pedestal beginning with diagonal
                    // TODO
                    //break;
                case 'ger':
                    // on pedestal beginning with staircase OR on staircase (object of preposition)
                    // TODO
                    //break;
                case 'np':
                    // on pedestal with horizontal (recurse) and broken line from explective to verb
                    // TODO
                    //break;
                case 'exp':
                    // on horizontal connected to modified word via broken
                    // TODO
                    alert("cannot draw a "+part+", not implemented");
                    break;
            }
            return this;
        }
        jQuery.fn.addPart = function(parts, event)
        {
            var container = this;
            var part = parts.getPartsText();
            var counter = diagramElementCounter + 1;
            switch (part)
            {
                // TODO - conj-s, conj-v, etc
                case 's':
                    // a subject requires a new clause - TODO - upgrade s to conj-s
                    container = $('#diagram');
                    container = $('<div />')
                        .addClass('diagram-clause')
                        .offset({left: event.originalEvent.offsetX, top: event.originalEvent.offsetY})
                        .appendTo(container);
                    console.log("addpart: part=s container=" + container.attr('id'));
                    break;
                case 'v':
                case 'do':
                case 'pn':
                case 'pa':
                    // a verb, verb phrase, direct object, predicate nominative, or predicate adjective
                    // applies to an existing clause
                    container = container.closest('.diagram-element-part, .diagram-clause').first();
                    if (!container.length)
                    {
                        alert("cannot add "+part+", clause required")
                        return;
                    }
                    switch (part)
                    {
                        case 'v':
                            // there can only be a single verb or verb phrase - TODO - upgrade v to conj-v
                            if (container.children('.diagram-element-v').length)
                            {
                                alert("cannot add a second "+part+" to the clause");
                                return;
                            }
                            // a verb or verb phrase requires an existing subject - TODO - or conj-s
                            if (!container.children('.diagram-element-s').length)
                            {
                                alert("cannot add a "+part+", subject required");
                                return;
                            }
                            break;
                        case 'do':
                        case 'pn':
                        case 'pa':
                            // there can only be a single direct object, predicate nominative, or predicate adjective
                            // TODO - upgrade to conj-do, conj-pa, conj-pa
                            if (container.children('.diagram-element-do, .diagram-element-pn, .diagram-element-pa').length)
                            {
                                alert("cannot add a second "+part+" to the clause");
                                return;
                            }
                            // a direct object, predicate nominative, or predicate adjective
                            // requires an existing verb or verb phrase
                            if (!container.children('.diagram-element-v').length && !container.hasClass('diagram-element-part'))
                            {
                                alert("cannot add a "+part+", verb/verb-phrase required");
                                return;
                            }
                            break;
                    }
                    console.log("addPart: part="+part+" container="+container.attr('id'));
                    break;
                case 'io':
                    // an indirect object requries a verb or verb phrase
                    // TODO
                    alert("cannot add an indirect object, not implemente");
                    break;
                case 'conj':
                    // a conjunction applies to two or more existing parts
                    // TODO - upgrade container to conj-<container-part> OR if container is conj-<part> add another <part> to conj-<part>
                    alert("cannot add a conjunction, not implemented");
                    return;
                    break;
                case 'app':
                    // TODO - more than one appositive
                    //break;
                case 'part':
                case 'adj':
                case 'adv':
                case 'art':
                case 'pos':
                case 'prep':
                case 'ip':
                case 'ger':
                case 'exp':
                case 'np':
                    // an indirect object, participal, adjective, adverb, article, possessive, preposition, appositive, infinitive phrase, gerund, explective, or noun phrase
                    // requires an existing part
                    // TODO - conjunctions
                    container = container.closest('.diagram-part').not('.diagram-element-part');
                    if (!container.length)
                    {
                        alert("cannot add a "+part+", element required")
                        return;
                    }
                    console.log("addPart: part="+part+" container=" + container.attr('id'));
                    break;
                default:
                    alert("something is very wrong... don't know what to do with a " + part);
                    break;
            }
            return container
                .addElement(part, counter)
                .drawClause();
        }
        var diagramElementCounter = 0;
        var margin = 20;
        jQuery.fn.addWord = function(words, counter)
        {
            console.log("addWord: this="+this.attr('id')+" "+this.attr('class')+", word="+words.text()+", word.width="+words.width()+", word.height="+words.height());
            var div = $('<div />')
                .attr('id', 'diagram-element-' + counter)
                .addClass('diagram-word')
                .addClass('diagram-element')
                .addClass('diagram-element-' + counter)
                .css({'text-align': 'center'/*, 'position': 'relative'*/})
                .appendTo(this);
            words.each(function() {
                $('<span />')
                    .text($(this).text())
                    .appendTo(div);
            })
            return this;
        }
        jQuery.fn.updateWord = function(words, counter)
        {
            console.log("updateWord: this="+this.attr('id')+" "+this.attr('class')+", words="+words.text());

            /*if (this.parent().parent().hasClass('.diagram-element-v'))
            {
                // TODO - upgrade v to vp
            }
            else*/ if (this.parent().parent().hasClass('diagram-element-app'))
            {
                console.log("updateWord: app");
                // TODO - add app word inside paranthesis
                var elements = this.children('span');
                if (!elements.length)
                {
                    alert("something is very wrong... appositive does not have ()");
                    return;
                }
                else if (elements.length === 2)
                {
                    elements.last().before($('<span />').text(words.text()));
                }
                else if (elements.length === 3)
                {
                    $(elements[1]).text(words.text());
                }
            }
            // TODO - are there other special cases?
            else
            {
                console.log("updateWord: else")
                this.addClass('diagram-element-'+counter)
                    .children('span')
                        .text(words.text());
            }
            return this;
        }
        jQuery.fn.addOrUpdateWord = function(words)
        {
            console.log("addOrUpdateWord: this="+this.attr('id')+" "+this.attr('class')+", words="+words.text());
            var counter = diagramElementCounter + 1;
            var diagramWord = this.children('.diagram-word');
            if (diagramWord.length)
            {
                diagramWord.updateWord(words, counter);
            }
            else
            {
                this.addWord(words, counter);
            }
            return this
                .updateCounter(counter)
                .drawClause();
        }
        function getEventTarget(event) {
            event = event || window.event;
            return event.target || event.srcElement;
        }

        $(document).ready(function() {
            var sentence = "Supercalifragalistic is simply quite atrocious.";
            var words = sentence.split(/[ ,]+/);
            words.forEach(function(word) {
                $('<span />').appendTo('#sentence')
                    .addClass('sentence-word')
                    .attr('id', word)
                    .text(word);
                $('<span />').appendTo('#sentence')
                    .addClass('sentence-space')
                    .text(" ");
            });
            $('#sentence .sentence-word')
            .draggable({
                 cancel: '.no-drag',
                 revert: true,
                 helper: 'clone',
                 opacity: 0.3
            })
            .click(function(event) {
                $('#sentence .sentence-word').removeClass('active');
                $(this).addClass('active');
            });

            var parts = [
                ['subject', 's'],
                ['verb', 'v'],
                ['direct object', 'do'],
                ['indirect object', 'io'],
                ['predicate nominative', 'pn'],
                ['predicate adjective', 'pa'],
                ['participle', 'part'],
                ['adjective', 'adj'],
                ['adverb', 'adv'],
                ['article', 'art'],
                ['possessive', 'pos'],
                ['preposition', 'prep'],
                ['conjunction', 'conj'],
                ['appositive', 'app'],
                ['infinitive phrase', 'ip'],
                ['gerund', 'ger'],
                ['expletive', 'exp'],
                ['noun phrase', 'np'] ];
            parts.forEach(function(part) {
                $('<button />').appendTo('#parts')
                    .attr('id', 'part-button-'+part[1])
                    .addClass('part-button')
                    .text(part[1]);
                $('<span />').appendTo('#parts')
                    .text(' ');
            });
            $('#parts button').click(function(event) {
                // TODO - allow conj to select another button
                $('#parts button').removeClass('active');
                $(this).addClass('active');
            })
            .draggable({
                 cancel: '.no-drag',
                 revert: true,
                 helper: 'clone',
                 opacity: 0.3
            });

            $('#diagram').click(function(event) {
                $(this).focus();
                var activeButtons = $('#parts .active');
                if (activeButtons.length)
                {
                    var target = $('#diagram .diagram-part-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                    if (target)
                    {
                        console.log("#diagram click : " + target.attr('id') + " -> " + activeButtons.text());
                        target.addPart(activeButtons, event);
                    }
                    else
                    {
                        console.log("#diagram click : " + this.id + " -> " + activeButtons.text());
                        $(this).addPart(activeButtons), event;
                    }
                    activeButtons.removeClass('active');
                    return;
                }
                var activeText = $('#sentence .active');
                if (activeText.length)
                {
                    var target = $('#diagram .diagram-part-word-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                    if (target)
                    {
                        console.log("#diagram click : " + target.attr('id') + " -> " + activeText.text());
                        target.addOrUpdateWord(activeText);
                        activeText.removeClass('active');
                        return;
                    }
                }
                var targetWord = $("#diagram .diagram-word").closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                if (targetWord)
                {
                    console.log("#diagram click : word=" + targetWord.text());
                    targetWord.addClass('active');
                }
            })
            .droppable({
                drop: function(event, ui) {
                    $(this).focus();
                    var draggable = $(ui.draggable);
                    if (draggable.hasClass('part-button'))
                    {
                        // TODO - conj selected and draggable is another part
                        var target = $('#diagram .diagram-part-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY}); 
                        if (target)
                        {
                            console.log("#diagram drop : " + target.attr('id') + " -> " + draggable.text());
                            target.addPart(draggable, event);
                        }
                        else
                        {
                            console.log("#diagram drop : " + this.id + " -> " + draggable.text());
                            $(this).addPart(draggable, event);
                        }
                        $(draggable).removeClass('active');
                        return;
                    }
                    if (draggable.hasClass('sentence-word'))
                    {
                        var target = $('#diagram .diagram-part-word-target').closestToOffset({left: event.originalEvent.pageX, top: event.originalEvent.pageY});
                        if (target)
                        {
                            console.log("#diagram drop : " + target.attr('id') + " -> " + draggable.text());
                            target.addOrUpdateWord($(draggable));
                            $(draggable).removeClass('active');
                        }
                        return;
                    }
                }
            })
            /*.keydown(function(event) {
                event.preventDefault();
                console.log("#diagram keydown : keyCode="+event.keyCode+", which="+event.which+", ctrlKey="+event.ctrlKey);
            })*/
            .keyup(function(event) {
                event.preventDefault();
                console.log("#diagram keyup : keyCode="+event.keyCode+", which="+event.which+", ctrlKey="+event.ctrlKey);
                switch (event.keyCode)
                {
                    case 46:
                        console.log("#diagram keyup: delete");
                        var selectedWord = $("#diagram .diagram-word.active");
                        if (selectedWord.length)
                        {
                            console.log("#diagram keyup: remove " + selectedWord.text());
                            selectedWord.remove();
                        }
                        break;
                    //case 17:
                    //    console.log("#diagram keyup: ctrl");
                    //    break;
                    case 90:
                        console.log("#diagram keyup: z");
                        if (event.ctrlKey)
                        {
                            console.log("#digram keyup: ctrl-z");
                            lastElement = $('.diagram-element-' + diagramElementCounter);
                            if (lastElement.length)
                            {
                                console.log("#diagram keyup: remove " + lastElement.attr('id'));
                                lastElement.remove();
                                --diagramElementCounter;
                            }
                        }
                        break;
                }
            });
        });
    </script>
}
